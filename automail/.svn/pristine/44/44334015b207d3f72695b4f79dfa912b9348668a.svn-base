package com.bdqn.util;

import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.logging.Logger;

/**
 * Created by Administrator on 2017/7/3.
 */
public class SendMail2 implements AutoMail {
    private static Logger logger = Logger.getLogger(String.valueOf(SendMail2.class));

    @Override
    public void sendMail() {
        //获取配置文件
        Properties properties = FileUtil.getProperties();
        //获取会话
        Session session = getSession(properties);
        //获取邮件内容
        MimeMessage message = saveMessage(session, properties.get("sendMailAccount").toString(), properties.get("receiveMailAccount").toString());
        //获取Transport对象
        Transport transport = getTransport(session);
        //连接
        try {
            transport.connect(properties.get("sendMailAccount").toString(), properties.get("sendMailPassword").toString());
        } catch (MessagingException e) {
            logger.info("邮箱服务器连接失败");
        }
        try {
            transport.sendMessage(message, message.getAllRecipients());
        } catch (MessagingException e) {
            logger.info("邮件内容错误");
        }
        try {
            transport.close();
        } catch (MessagingException e) {
            logger.info("传输对象无法关闭");
        }
    }

    @Override
    public Transport getTransport(Session session) {
        Transport transport = null;
        try {
            transport = session.getTransport();
        } catch (NoSuchProviderException e) {
            logger.info("传输对象创建失败");
        }
        return transport;
    }

    @Override
    public Session getSession(Properties properties) {
        //获取会话
        Session session = Session.getDefaultInstance(properties);
        session.setDebug(true);
        return session;
    }

    @Override
    //创建邮件内容
    public MimeMessage saveMessage(Session session, String sendMail, String receiveMail) {
        MimeMessage message = new MimeMessage(session);

        try {
            message.setFrom(new InternetAddress(sendMail, "AutoMail", "UTF-8"));
        } catch (MessagingException e) {
            logger.info("发件人设置失败");
        } catch (UnsupportedEncodingException e) {
            logger.info("发件人编码格式不支持");
        }

        try {
            message.setRecipient(MimeMessage.RecipientType.TO, new InternetAddress(receiveMail, "AutoMail", "UTF-8"));
        } catch (MessagingException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        // 4. Subject: 邮件主题
        String subject = "数据备份" + new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        try {
            message.setSubject(subject, "UTF-8");
        } catch (MessagingException e) {
            logger.info("主题设置失败");
        }

        // 5. 设置发件时间
        try {
            message.setSentDate(new Date());
        } catch (MessagingException e) {
            logger.info("发送日期设置失败");
        }

        // 6. Content: 邮件正文（可以使用html标签）
        //获取mixed类型的MINE消息体msgMultipart
        MimeMultipart msgMultipart = new MimeMultipart("mixed");//混合的组合关系

        //将msgMultipart设置为邮件内容
        try {
            message.setContent(msgMultipart);
        } catch (MessagingException e) {
            logger.info("消息体添加失败");
        }

        //创建附件1
        List<MimeBodyPart> attchList = FileUtil.getFiles();
        for (MimeBodyPart attch : attchList
                ) {
            try {
                //将attch1添加到MINE消息体msgMultipart中
                msgMultipart.addBodyPart(attch);
            } catch (MessagingException e) {
                logger.info("附件添加失败");
            }
        }
        //创建正文内容
        MimeBodyPart content = new MimeBodyPart();
        //将content添加到MINE消息体msgMultipart中
        try {
            msgMultipart.addBodyPart(content);
        } catch (MessagingException e) {
            logger.info("正文添加失败");
        }

        //正文（图片和文字部分）
        MimeMultipart bodyMultipart = new MimeMultipart("related");
        //设置内容为正文
        try {
            content.setContent(bodyMultipart);
        } catch (MessagingException e) {
            logger.info("正文内容添加失败");
        }

        //html代码部分
        MimeBodyPart htmlPart = new MimeBodyPart();

        //正文添加图片和html代码
        try {
            bodyMultipart.addBodyPart(htmlPart);
        } catch (MessagingException e) {
            logger.info("正文内容添加失败");
        }
        //html代码
        String htmlContent = "备份：";
        try {
            htmlPart.setContent("<span style='color:red'>" + htmlContent + "</span>", "text/html;charset=utf-8");
        } catch (MessagingException e) {
            logger.info("正文内容编辑失败");
        }
        // 7. 保存设置
        try {
            message.saveChanges();
        } catch (MessagingException e) {
            logger.info("邮件内容保存失败");
        }

        return message;

    }
}
