package com.bdqn.util;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.logging.Logger;

/**
 * Created by admin on 2017/7/3.
 */
public class FileUtil  {
<<<<<<< .mine


||||||| .r27





=======
>>>>>>> .r28
    private static Logger logger = Logger.getLogger(String.valueOf(FileUtil.class));

    /**
     * 读取邮件配置信息
     */
    public static Properties getProperties() {
        //创建属性文件对象 
        Properties properties = new Properties();
        //创建一个输入流来读取配置文件
        InputStream resourceAsStream = null;
        //获取配置文件
        try {
            resourceAsStream = FileUtil.class.getClassLoader().getResourceAsStream("properties/sendMail.properties");
            properties.load(resourceAsStream);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            //关闭文件流
            if (resourceAsStream != null) {
                try {
                    resourceAsStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return properties;
    }

    public static List<MimeBodyPart> getFiles() {
        List<MimeBodyPart> attchs = new ArrayList<MimeBodyPart>();

        String path = "src/main/resources/upload/";
        File file = new File(path);
        File[] tempList = file.listFiles();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String fileName = null;
        for (int i = 0; i < tempList.length; i++) {
            if (tempList[i].isFile()) {
                fileName = tempList[i].getName();
                String after = fileName.substring(fileName.lastIndexOf("."));
                if (fileName.lastIndexOf(".") - fileName.lastIndexOf("_") == 11) {
                    fileName = fileName.substring(0, fileName.lastIndexOf("_"));
                } else {
                    fileName = fileName.substring(0, fileName.lastIndexOf("."));
                }
                fileName = fileName + "_" + format.format(new Date()) + after;
                tempList[i].renameTo(new File(path + fileName));
                //创建一个附件
                MimeBodyPart attach = new MimeBodyPart();
                DataSource ds = new FileDataSource(tempList[i]);
                //数据处理器
                DataHandler dh = new DataHandler(ds);
                //把文件放入附件中
                try {
                    attach.setDataHandler(dh);
                    attach.setFileName(fileName);
                    attchs.add(attach);
                } catch (MessagingException e) {
                    e.printStackTrace();
                }
            }
        }
        return attchs;
    }

//    @Override
    public static void sendMail() {
        //获取配置文件
        Properties properties = FileUtil.getProperties();
        //获取会话
        Session session = getSession(properties);
        //获取邮件内容
        MimeMessage message = saveMessage(session, properties.get("sendMailAccount").toString(), properties.get("receiveMailAccount").toString());
        //获取Transport对象
        Transport transport = getTransport(session);
        //连接
        try {
            transport.connect(properties.get("sendMailAccount").toString(), properties.get("sendMailPassword").toString());
        } catch (MessagingException e) {
            logger.info("邮箱服务器连接失败");
        }
        try {
            transport.sendMessage(message, message.getAllRecipients());
        } catch (MessagingException e) {
            logger.info("邮件内容错误");
        }
        try {
            transport.close();
        } catch (MessagingException e) {
            logger.info("传输对象无法关闭");
        }
    }

//    @Override
    public static Transport getTransport(Session session) {
        Transport transport = null;
        try {
            transport = session.getTransport();
        } catch (NoSuchProviderException e) {
            logger.info("传输对象创建失败");
        }
        return transport;
    }

//    @Override
    public static Session getSession(Properties properties) {
        //获取会话
        Session session = Session.getDefaultInstance(properties);
        session.setDebug(true);
        return session;
    }

//    @Override
    //创建邮件内容
    public static MimeMessage saveMessage(Session session, String sendMail, String receiveMail) {
        MimeMessage message = new MimeMessage(session);

        try {
            message.setFrom(new InternetAddress(sendMail, "AutoMail", "UTF-8"));
        } catch (MessagingException e) {
            logger.info("发件人设置失败");
        } catch (UnsupportedEncodingException e) {
            logger.info("发件人编码格式不支持");
        }

        try {
            message.setRecipient(MimeMessage.RecipientType.TO, new InternetAddress(receiveMail, "AutoMail", "UTF-8"));
        } catch (MessagingException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        // 4. Subject: 邮件主题
        String subject = "数据备份" + new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        try {
            message.setSubject(subject, "UTF-8");
        } catch (MessagingException e) {
            logger.info("主题设置失败");
        }

        // 5. 设置发件时间
        try {
            message.setSentDate(new Date());
        } catch (MessagingException e) {
            logger.info("发送日期设置失败");
        }

        // 6. Content: 邮件正文（可以使用html标签）
        //获取mixed类型的MINE消息体msgMultipart
        MimeMultipart msgMultipart = new MimeMultipart("mixed");//混合的组合关系

        //将msgMultipart设置为邮件内容
        try {
            message.setContent(msgMultipart);
        } catch (MessagingException e) {
            logger.info("消息体添加失败");
        }

        //创建附件1
        List<MimeBodyPart> attchList = FileUtil.getFiles();
        for (MimeBodyPart attch : attchList
                ) {
            try {
                //将attch1添加到MINE消息体msgMultipart中
                msgMultipart.addBodyPart(attch);
            } catch (MessagingException e) {
                logger.info("附件添加失败");
            }
        }
        //创建正文内容
        MimeBodyPart content = new MimeBodyPart();
        //将content添加到MINE消息体msgMultipart中
        try {
            msgMultipart.addBodyPart(content);
        } catch (MessagingException e) {
            logger.info("正文添加失败");
        }

        //正文（图片和文字部分）
        MimeMultipart bodyMultipart = new MimeMultipart("related");
        //设置内容为正文
        try {
            content.setContent(bodyMultipart);
        } catch (MessagingException e) {
            logger.info("正文内容添加失败");
        }

        //html代码部分
        MimeBodyPart htmlPart = new MimeBodyPart();

        //正文添加图片和html代码
        try {
            bodyMultipart.addBodyPart(htmlPart);
        } catch (MessagingException e) {
            logger.info("正文内容添加失败");
        }
        //html代码
        String htmlContent = "备份：";
        try {
            htmlPart.setContent("<span style='color:red'>" + htmlContent + "</span>", "text/html;charset=utf-8");
        } catch (MessagingException e) {
            logger.info("正文内容编辑失败");
        }
        // 7. 保存设置
        try {
            message.saveChanges();
        } catch (MessagingException e) {
            logger.info("邮件内容保存失败");
        }

        return message;

    }
}
