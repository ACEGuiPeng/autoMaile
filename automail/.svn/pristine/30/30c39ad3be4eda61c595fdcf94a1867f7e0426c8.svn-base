package com.bdqn.util;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Pattern;

/**
 * Created by admin on 2017/7/3.
 */
public final class Config {

    private static final ResourceBundle config = ResourceBundle.getBundle("properties/sendMail");

    //邮箱服务器
    public static final String mailHost = config.getString("mail.smtp.host");

    //身份验证
    public static final String auth = config.getString("mail.smtp.auth");

    //协议
    public static final String protocol = config.getString("mail.transport.protocol");
    //发件人邮件地址
    public static final String sendMailAccount = config.getString("sendMailAccount");
    //发件人邮件授权码
    public static final String sendMailPassword = config.getString("sendMailPassword");
    //收件人地址
    public static final String receiveMailAccount = config.getString("receiveMailAccount");
    //邮箱服务器端口
    public static final String smtpPort = config.getString("mail.smtp.port");
    //备份文件根目录
    private static String backupFilePath = config.getString("backupFilePath");
    //备份文件
    public static final List<File> files = getFiles(backupFilePath);

    private static List<File> getFiles(String backupFilePath) {
        List<File> files = new ArrayList<File>();
        Map<String,String> fileNameAndPaths = new HashMap<String, String>(); //文件上级路径
        String currentTime = new SimpleDateFormat("yyyy-MM-dd").format(new Date()).toString();//当前日期
        String timePattern = "\\D*_[1-9]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])";//日期正则
        //得到多个文件根目录
        String[] filePaths = backupFilePath.trim().split(",");
        for (String filepath : filePaths) {
            fileNameAndPaths.put(filepath.trim().substring(0,filepath.lastIndexOf("/"))+"/",filepath.trim().substring(filepath.lastIndexOf("/")+1,filepath.indexOf("_")));
        }
        //遍历文件夹下的文件
        Set<String> parentPaths = fileNameAndPaths.keySet();
        for (String parentPath:parentPaths) {
            File file = new File(parentPath);
            File[] fileList = file.listFiles();
            for (int i=0;i<fileList.length;i++){
                //判断是不是这个文件名
                if(Pattern.matches(".*"+fileNameAndPaths.get(parentPath)+".*",fileList[i].getName())){
                    //判断是不是最新的日期
                    if (Pattern.matches(".*"+currentTime+".*",fileList[i].getName())){
                        files.add(fileList[i]);
                    }else {
                        continue;
                    }
                }else{
                    continue;
                }
            }
        }
        return files;
    }

   /* private final static Logger logger = LoggerFactory.getLogger(Config.class);
    private static MailAuthenticator authenticator = null;
    private static Transport transport = null;

    *//**
     * 读取邮件配置信息
     *//*
    public static Properties getProperties() {
        //创建属性文件对象
        Properties properties = new Properties();
        //创建一个输入流来读取配置文件
        InputStream resourceAsStream = null;
        //获取配置文件
        try {
            resourceAsStream = Config.class.getClassLoader().getResourceAsStream("properties/sendMail.properties");
            properties.load(resourceAsStream);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            //关闭文件流
            if (resourceAsStream != null) {
                try {
                    resourceAsStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return properties;
    }

    public static Map<String, MimeBodyPart> getFiles() {
        Map<String, MimeBodyPart> attchs = new HashMap<String, MimeBodyPart>();
        Properties properties = Config.getProperties();
        //扫描路径,得到多个文件夹路径
        String[] filePaths = properties.get("backupFilePath").toString().trim().split(",");
        String[] fileKeys = properties.get("backupFileName").toString().trim().split(",");
        //创建一个日期的正则匹配
        String pattern = "\\D*_[1-9]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])";
        //创建一个文件名关键字的正则匹配
        StringBuffer fileNamePattSb = new StringBuffer("");
        for (int n = 0; n < fileKeys.length; n++) {
            fileNamePattSb.append("(.*" + fileKeys[n] + ".*)|");
        }
        String fileNamePatt = fileNamePattSb.toString();
        if (fileNamePatt.lastIndexOf("|") == fileNamePatt.length()) {
            fileNamePatt = fileNamePatt.substring(0, fileNamePatt.length() - 1);
        }
        //遍历文件夹下的文件
        for (int m = 0; m < filePaths.length; m++) {
            File file = new File(filePaths[m] + "/");
            File[] tempList = file.listFiles();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            String currentTime = ".*" + format.format(new Date()).toString() + ".*";//当前时间
            String fileName = null;
            if (tempList != null) {
                for (int i = 0; i < tempList.length; i++) {
                    //处理文件名
                    if (tempList[i].isFile()) {
                        fileName = tempList[i].getName();
                        String after = fileName.substring(fileName.lastIndexOf("."));
                        fileName = fileName.substring(0, fileName.lastIndexOf('.'));
                        //如果没有时间戳，就加上
                        if (Pattern.matches(fileNamePatt, fileName) && !Pattern.matches(pattern, fileName)) {
                            fileName = fileName + "_" + format.format(new Date()) + after;
                            File newFile = new File(filePaths[m] + "/" + fileName);
                            tempList[i].renameTo(newFile);
                            tempList[i] = newFile;
                        } else {
                            fileName = fileName + after;
                        }
                        if (Pattern.matches(currentTime, fileName)) {
                            //创建一个附件
                            MimeBodyPart attach = new MimeBodyPart();
                            DataSource ds = new FileDataSource(tempList[i]);
                            //数据处理器
                            DataHandler dh = new DataHandler(ds);
                            //把文件放入附件中
                            try {
                                attach.setDataHandler(dh);
                                try {
                                    attach.setFileName(MimeUtility.encodeWord(fileName));
                                    attchs.put(fileName, attach);
                                    break;
                                } catch (UnsupportedEncodingException e) {
                                    logger.info("文件名不规范");
                                }
                                break;
                            } catch (MessagingException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            } else {
                logger.info(filePaths[m] + ":该文件夹为空");
                break;
            }
        }
        return attchs;
    }*/
}
